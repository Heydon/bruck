{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "elements/Base.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseElement",
          "members": [
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ]
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ]
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ]
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}"
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')"
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "summary": "The base class for creating elements",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseElement",
          "declaration": {
            "name": "BaseElement",
            "module": "elements/Base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pattern/Pattern.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PatternElement",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/elements/Base.js"
          },
          "summary": "The base element for pattern elements"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PatternElement",
          "declaration": {
            "name": "PatternElement",
            "module": "elements/pattern/Pattern.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Layout.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LayoutElement",
          "members": [
            {
              "kind": "method",
              "name": "compile"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "gap"
            },
            {
              "kind": "field",
              "name": "items"
            },
            {
              "kind": "field",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/elements/Base.js"
          },
          "summary": "The base element used for constructing layouts. Not to be rendered itself."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LayoutElement",
          "declaration": {
            "name": "LayoutElement",
            "module": "elements/layout/Layout.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Shape.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ShapeElement",
          "members": [
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ]
            },
            {
              "kind": "method",
              "name": "draw"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "aspectRatio"
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/elements/Base.js"
          },
          "summary": "The base element used for constructing shapes using SVG"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ShapeElement",
          "declaration": {
            "name": "ShapeElement",
            "module": "elements/shape/Shape.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/composition/Clone/Clone.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CloneElement",
          "members": [
            {
              "kind": "field",
              "name": "of"
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "Corresponds to the id of the template element whose content’s should be cloned",
              "name": "of"
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/elements/Base.js"
          },
          "tagName": "c-lone",
          "summary": "Clones the content of a referenced template element as a subtree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CloneElement",
          "declaration": {
            "name": "CloneElement",
            "module": "elements/composition/Clone/Clone.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pattern/Dots/Dots.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DotsElement",
          "members": [
            {
              "kind": "method",
              "name": "compile"
            },
            {
              "kind": "field",
              "name": "size"
            },
            {
              "kind": "field",
              "name": "radius"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "PatternElement",
                "module": "elements/pattern/Pattern.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "PatternElement",
                "module": "elements/pattern/Pattern.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "A CSS size value representing the space taken up by each part of the pattern",
              "name": "size"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "A float between 0 and 1 representing the radius of the dot relative to the size of the pattern",
              "name": "radius"
            }
          ],
          "superclass": {
            "name": "PatternElement",
            "module": "/elements/pattern/Pattern.js"
          },
          "tagName": "d-ots",
          "summary": "A mask that applies a dotted pattern to descendant elements",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DotsElement",
          "declaration": {
            "name": "DotsElement",
            "module": "elements/pattern/Dots/Dots.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pattern/Stripes/Stripes.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StripesElement",
          "members": [
            {
              "kind": "method",
              "name": "compile"
            },
            {
              "kind": "field",
              "name": "width"
            },
            {
              "kind": "field",
              "name": "space"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "PatternElement",
                "module": "elements/pattern/Pattern.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "PatternElement",
                "module": "elements/pattern/Pattern.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "A CSS size value representing the width of each stripe",
              "name": "width"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "A CSS size value representing the space between each stripe",
              "name": "space"
            }
          ],
          "superclass": {
            "name": "PatternElement",
            "module": "/elements/pattern/Pattern.js"
          },
          "tagName": "s-tripes",
          "summary": "A mask that applies a striped pattern to descendant elements",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StripesElement",
          "declaration": {
            "name": "StripesElement",
            "module": "elements/pattern/Stripes/Stripes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Center/Center.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CenterElement",
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "max"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "The `max-inline-size` of the centered element",
              "name": "max"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "c-enter",
          "summary": "Makes a vertically centered column with an inline size equal to whichever is larger: the content of the element or the max (`max-inline-size`) value set",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CenterElement",
          "declaration": {
            "name": "CenterElement",
            "module": "elements/layout/Center/Center.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Cluster/Cluster.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClusterElement",
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "justify"
            },
            {
              "kind": "field",
              "name": "aliases",
              "type": {
                "text": "object"
              },
              "default": "{\n\t\t\tstart: 'flex-start',\n\t\t\tend: 'flex-end',\n\t\t\tleft: 'flex-start',\n\t\t\tright: 'flex-end'\n\t\t}"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "A Flexbox justify-content value",
              "name": "justify"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "c-luster",
          "summary": "Places flex items horizontally, with wrapping",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClusterElement",
          "declaration": {
            "name": "ClusterElement",
            "module": "elements/layout/Cluster/Cluster.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Grid/Grid.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GridElement",
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "min"
            },
            {
              "kind": "field",
              "name": "masonry"
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'start'"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "The minimum width of items/cells in the grid (never exceeding 100%)",
              "name": "min"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Whether to apply a masonry layout",
              "name": "masonry"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "g-rid",
          "summary": "Renders child elements in a basic CSS Grid formation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GridElement",
          "declaration": {
            "name": "GridElement",
            "module": "elements/layout/Grid/Grid.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Repel/Repel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RepelElement",
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "from"
            },
            {
              "kind": "field",
              "name": "valid",
              "type": {
                "text": "array"
              },
              "default": "[\n\t\t\t'top', \n\t\t\t'right', \n\t\t\t'bottom', \n\t\t\t'left',\n\t\t\t'block-start',\n\t\t\t'inline-end',\n\t\t\t'block-end',\n\t\t\t'inline-start'\n\t\t]"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "A space or comma separated set of margin properties",
              "name": "from"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "r-epel",
          "summary": "Repels elements using an auto margin",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RepelElement",
          "declaration": {
            "name": "RepelElement",
            "module": "elements/layout/Repel/Repel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Sidebar/Sidebar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SidebarElement",
          "slots": [
            {
              "description": "The content to appear at the start (typically left) of the inline axis",
              "name": "start"
            },
            {
              "description": "The content to appear at the end (typically right) of the inline axis",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "sideWidth"
            },
            {
              "kind": "field",
              "name": "end"
            },
            {
              "kind": "field",
              "name": "threshold"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "The width of the sidebar where there is room to accommodate one",
              "name": "sidewidth"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "The width of the non-sidebar, as a percentage of the container, at which it should wrap",
              "name": "threshold"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Treat the end (typically right) content as the sidebar",
              "name": "end"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "s-idebar",
          "summary": "Wraps two elements, with one acting as a sidebar and the other taking up the remaining space",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SidebarElement",
          "declaration": {
            "name": "SidebarElement",
            "module": "elements/layout/Sidebar/Sidebar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/layout/Stack/Stack.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StackElement",
          "members": [
            {
              "kind": "method",
              "name": "compile",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "superclass": {
            "name": "LayoutElement",
            "module": "/elements/layout/Layout.js"
          },
          "tagName": "s-tack",
          "summary": "Inserts a gap between block elements",
          "customElement": true,
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "the spacing (gutter) between child elements * @attr {string} items - the CSS `align-items` value",
              "name": "gap",
              "inheritedFrom": {
                "name": "LayoutElement",
                "module": "elements/layout/Layout.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StackElement",
          "declaration": {
            "name": "StackElement",
            "module": "elements/layout/Stack/Stack.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Ellipse/Ellipse.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EllipseElement",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ],
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "superclass": {
            "name": "ShapeElement",
            "module": "/elements/shape/Shape.js"
          },
          "tagName": "e-llipse",
          "summary": "An ellipse shape",
          "customElement": true,
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EllipseElement",
          "declaration": {
            "name": "EllipseElement",
            "module": "elements/shape/Ellipse/Ellipse.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Line/Line.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LineElement",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "thickness"
            },
            {
              "kind": "field",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "superclass": {
            "name": "BaseElement",
            "module": "/elements/Base.js"
          },
          "tagName": "l-ine",
          "summary": "A simple line / horizontal rule",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LineElement",
          "declaration": {
            "name": "LineElement",
            "module": "elements/shape/Line/Line.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Polygon/Polygon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PolygonElement",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "sides"
            },
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ],
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "number"
              },
              "description": "An integer representing the number of sides",
              "name": "sides"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            }
          ],
          "superclass": {
            "name": "ShapeElement",
            "module": "/elements/shape/Shape.js"
          },
          "tagName": "p-olygon",
          "summary": "A polygon shape",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PolygonElement",
          "declaration": {
            "name": "PolygonElement",
            "module": "elements/shape/Polygon/Polygon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Rectangle/Rectangle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RectangleElement",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ],
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "superclass": {
            "name": "ShapeElement",
            "module": "/elements/shape/Shape.js"
          },
          "tagName": "r-ectangle",
          "summary": "A rectangle shape",
          "customElement": true,
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RectangleElement",
          "declaration": {
            "name": "RectangleElement",
            "module": "elements/shape/Rectangle/Rectangle.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Star/Star.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "StarElement",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "points"
            },
            {
              "kind": "field",
              "name": "inner"
            },
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ],
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "number"
              },
              "description": "An integer representing the number of points",
              "name": "points"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "A float between 0 and 1 representing the proportion of the inner radius of the star",
              "name": "inner"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            }
          ],
          "superclass": {
            "name": "ShapeElement",
            "module": "/elements/shape/Shape.js"
          },
          "tagName": "s-tar",
          "summary": "A star shape",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StarElement",
          "declaration": {
            "name": "StarElement",
            "module": "elements/shape/Star/Star.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/shape/Triangle/Triangle.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TriangleElement",
          "members": [
            {
              "kind": "method",
              "name": "draw",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "kind"
            },
            {
              "kind": "method",
              "name": "createCanvas",
              "parameters": [
                {
                  "name": "aspectRatio"
                }
              ],
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "field",
              "name": "aspectRatio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            },
            {
              "kind": "method",
              "name": "catchType",
              "parameters": [
                {
                  "name": "val"
                },
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toArray",
              "parameters": [
                {
                  "name": "string"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "parameters": [
                {
                  "name": "array"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "integerOrBetween",
              "parameters": [
                {
                  "name": "string"
                },
                {
                  "name": "prop"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "method",
              "name": "isValidUrl",
              "parameters": [
                {
                  "name": "url"
                }
              ],
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "random",
              "type": {
                "text": "object"
              },
              "default": "{ \n\t\t\tintegerBetween(min, max) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t\t\t},\n\t\t\tfloatBetween(min, max, places = 3) {\n\t\t\t\tmin = min > max ? max : min;\n\t\t\t\tmax = max < min ? min : max;\n\t\t\t\treturn (Math.random() * (max - min + 1) + min).toFixed(places);\n\t\t\t},\n\t\t\toneOf(array) {\n\t\t\t\tarray = array || [0];\n\t\t\t\treturn array[Math.floor(Math.random() * array.length)];\n\t\t\t},\n\t\t\tshuffle(array) {\n\t\t\t\treturn array.map(value => ({ value, sort: Math.random() }))\n\t\t\t\t\t.sort((a, b) => a.sort - b.sort)\n\t\t\t\t\t.map(({ value }) => value);\n\t\t\t},\n\t\t\tprobability(fraction) {\n\t\t\t\treturn Math.random() <= fraction;\n\t\t\t}\n\t\t}",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "betweenPattern",
              "default": "new RegExp('[0-9]+[-]{1}[0-9]+')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            },
            {
              "kind": "field",
              "name": "integerPattern",
              "default": "new RegExp('^[0-9]*$')",
              "inheritedFrom": {
                "name": "BaseElement",
                "module": "elements/Base.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "The orientation of the triangle. One of the unicode points ◣, ◤, ◥, ◢, ▲, ▶, ▼, or ◀",
              "name": "kind"
            },
            {
              "type": {
                "text": "string"
              },
              "description": "a CSS `aspect-ratio` value",
              "name": "aspectratio",
              "inheritedFrom": {
                "name": "ShapeElement",
                "module": "elements/shape/Shape.js"
              }
            }
          ],
          "superclass": {
            "name": "ShapeElement",
            "module": "/elements/shape/Shape.js"
          },
          "tagName": "t-riangle",
          "summary": "A triangle shape",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TriangleElement",
          "declaration": {
            "name": "TriangleElement",
            "module": "elements/shape/Triangle/Triangle.js"
          }
        }
      ]
    }
  ]
}
